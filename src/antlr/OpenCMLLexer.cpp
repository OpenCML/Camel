
/**
 * Copyright (c) 2022 Beijing Jiaotong University
 * PhotLab is licensed under [Open Source License].
 * You can use this software according to the terms and conditions of the [Open
 * Source License]. You may obtain a copy of [Open Source License] at:
 * [https://open.source.license/]
 *
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY
 * KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 * NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 *
 * See the [Open Source License] for more details.
 *
 * Author: Zhenjie Wei
 * Supported by: National Key Research and Development Program of China
 */


// Generated from OpenCML.g4 by ANTLR 4.13.1


#include "OpenCMLLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct OpenCMLLexerStaticData final {
  OpenCMLLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  OpenCMLLexerStaticData(const OpenCMLLexerStaticData&) = delete;
  OpenCMLLexerStaticData(OpenCMLLexerStaticData&&) = delete;
  OpenCMLLexerStaticData& operator=(const OpenCMLLexerStaticData&) = delete;
  OpenCMLLexerStaticData& operator=(OpenCMLLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag opencmllexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
OpenCMLLexerStaticData *opencmllexerLexerStaticData = nullptr;

void opencmllexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (opencmllexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(opencmllexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<OpenCMLLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
      "T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "SEP", "AS", 
      "IS", "LET", "VAR", "USE", "FROM", "FUNC", "TYPE", "WITH", "WAIT", 
      "RETURN", "INNER", "OUTER", "ATOMIC", "STATIC", "NULL", "TRUE", "FALSE", 
      "INTEGER_TYPE", "INTEGER32_TYPE", "INTEGER64_TYPE", "REAL_TYPE", "FLOAT_TYPE", 
      "DOUBLE_TYPE", "NUMBER_TYPE", "STRING_TYPE", "BOOL_TYPE", "CHAR_TYPE", 
      "SET_TYPE", "MAP_TYPE", "LIST_TYPE", "DICT_TYPE", "ARRAY_TYPE", "TUPLE_TYPE", 
      "UNION_TYPE", "VECTOR_TYPE", "TENSOR_TYPE", "ANY_TYPE", "VOID_TYPE", 
      "FUNCTOR_TYPE", "BLANK", "LIN_CMT_HASH", "LIN_CMT_SLASH", "BLK_CMT", 
      "MULTI_STR", "IDENTIFIER", "UNIT", "STRING", "FSTRING", "INTEGER", 
      "REAL", "DECIMAL", "OCTAL", "HEXADECIMAL", "BINARY", "FLOAT", "EXPONENT_FLOAT", 
      "EXPONENT_DECIMAL", "EXPONENT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "':'", "'='", "':='", "'=>'", "'@'", "'['", "']'", "','", "'{'", 
      "'}'", "'{|'", "'|}'", "'[|'", "'|]'", "'('", "')'", "'(|'", "'|)'", 
      "'<'", "'>'", "'->'", "'.'", "'\\u003F'", "'+='", "'-='", "'*='", 
      "'/='", "'%='", "'^='", "'&='", "'|='", "'<='", "'>='", "'=='", "'!='", 
      "'&&'", "'||'", "'+'", "'-'", "'&'", "'|'", "'^'", "'*'", "'/'", "'%'", 
      "'!'", "'~'", "';'", "'as'", "'is'", "'let'", "'var'", "'use'", "'from'", 
      "'func'", "'type'", "'with'", "'wait'", "'return'", "'inner'", "'outer'", 
      "'atomic'", "'static'", "'null'", "'true'", "'false'", "'Int'", "'Int32'", 
      "'Int64'", "'Real'", "'Float'", "'Double'", "'Number'", "'String'", 
      "'Bool'", "'Char'", "'Set'", "'Map'", "'List'", "'Dict'", "'Array'", 
      "'Tuple'", "'Union'", "'Vector'", "'Tensor'", "'Any'", "'Void'", "'Functor'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "SEP", "AS", 
      "IS", "LET", "VAR", "USE", "FROM", "FUNC", "TYPE", "WITH", "WAIT", 
      "RETURN", "INNER", "OUTER", "ATOMIC", "STATIC", "NULL", "TRUE", "FALSE", 
      "INTEGER_TYPE", "INTEGER32_TYPE", "INTEGER64_TYPE", "REAL_TYPE", "FLOAT_TYPE", 
      "DOUBLE_TYPE", "NUMBER_TYPE", "STRING_TYPE", "BOOL_TYPE", "CHAR_TYPE", 
      "SET_TYPE", "MAP_TYPE", "LIST_TYPE", "DICT_TYPE", "ARRAY_TYPE", "TUPLE_TYPE", 
      "UNION_TYPE", "VECTOR_TYPE", "TENSOR_TYPE", "ANY_TYPE", "VOID_TYPE", 
      "FUNCTOR_TYPE", "BLANK", "LIN_CMT_HASH", "LIN_CMT_SLASH", "BLK_CMT", 
      "MULTI_STR", "IDENTIFIER", "UNIT", "STRING", "FSTRING", "INTEGER", 
      "REAL"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,99,753,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,
  	1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,
  	11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,
  	16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,
  	22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,
  	27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,
  	32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,
  	36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,
  	43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,
  	49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,
  	53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,
  	56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,
  	58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,
  	60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,
  	62,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,
  	65,1,65,1,65,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,1,68,1,
  	68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,
  	70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,
  	72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,
  	75,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,78,1,
  	78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,1,
  	80,1,81,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,83,1,
  	83,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,85,1,
  	85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,1,
  	87,1,87,1,88,4,88,553,8,88,11,88,12,88,554,1,88,1,88,1,89,1,89,5,89,561,
  	8,89,10,89,12,89,564,9,89,1,89,1,89,1,90,1,90,1,90,1,90,5,90,572,8,90,
  	10,90,12,90,575,9,90,1,90,1,90,1,91,1,91,1,91,1,91,5,91,583,8,91,10,91,
  	12,91,586,9,91,1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,5,92,
  	598,8,92,10,92,12,92,601,9,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
  	5,92,611,8,92,10,92,12,92,614,9,92,1,92,1,92,1,92,3,92,619,8,92,1,93,
  	1,93,5,93,623,8,93,10,93,12,93,626,9,93,1,94,1,94,1,94,1,94,1,94,1,94,
  	5,94,634,8,94,10,94,12,94,637,9,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,
  	1,95,5,95,647,8,95,10,95,12,95,650,9,95,1,95,1,95,1,95,1,95,1,95,1,95,
  	1,95,5,95,659,8,95,10,95,12,95,662,9,95,1,95,3,95,665,8,95,1,96,1,96,
  	1,96,1,97,1,97,1,97,1,97,1,97,3,97,675,8,97,1,98,1,98,3,98,679,8,98,1,
  	99,3,99,682,8,99,1,99,1,99,5,99,686,8,99,10,99,12,99,689,9,99,1,99,3,
  	99,692,8,99,1,100,3,100,695,8,100,1,100,1,100,4,100,699,8,100,11,100,
  	12,100,700,1,101,3,101,704,8,101,1,101,1,101,1,101,1,101,4,101,710,8,
  	101,11,101,12,101,711,1,102,3,102,715,8,102,1,102,1,102,1,102,1,102,4,
  	102,721,8,102,11,102,12,102,722,1,103,3,103,726,8,103,1,103,4,103,729,
  	8,103,11,103,12,103,730,1,103,1,103,4,103,735,8,103,11,103,12,103,736,
  	1,104,1,104,1,104,1,105,1,105,1,105,1,106,1,106,3,106,747,8,106,1,106,
  	4,106,750,8,106,11,106,12,106,751,6,584,599,612,635,648,660,0,107,1,1,
  	3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
  	15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
  	53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
  	38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,
  	99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,
  	119,60,121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,
  	139,70,141,71,143,72,145,73,147,74,149,75,151,76,153,77,155,78,157,79,
  	159,80,161,81,163,82,165,83,167,84,169,85,171,86,173,87,175,88,177,89,
  	179,90,181,91,183,92,185,93,187,94,189,95,191,96,193,97,195,98,197,99,
  	199,0,201,0,203,0,205,0,207,0,209,0,211,0,213,0,1,0,12,3,0,9,10,12,13,
  	32,32,2,0,10,10,12,13,2,0,10,10,13,13,3,0,65,90,95,95,97,122,4,0,48,57,
  	65,90,95,95,97,122,2,0,43,43,45,45,1,0,49,57,1,0,48,57,1,0,48,55,3,0,
  	48,57,65,70,97,102,1,0,48,49,2,0,69,69,101,101,781,0,1,1,0,0,0,0,3,1,
  	0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
  	15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
  	0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
  	0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
  	47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
  	0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
  	0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,
  	79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,
  	0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,
  	0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,
  	0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,
  	0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,
  	0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,
  	0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,
  	0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,
  	0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,
  	0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,1,0,0,0,0,177,1,0,0,0,0,179,1,0,0,
  	0,0,181,1,0,0,0,0,183,1,0,0,0,0,185,1,0,0,0,0,187,1,0,0,0,0,189,1,0,0,
  	0,0,191,1,0,0,0,0,193,1,0,0,0,0,195,1,0,0,0,0,197,1,0,0,0,1,215,1,0,0,
  	0,3,217,1,0,0,0,5,219,1,0,0,0,7,222,1,0,0,0,9,225,1,0,0,0,11,227,1,0,
  	0,0,13,229,1,0,0,0,15,231,1,0,0,0,17,233,1,0,0,0,19,235,1,0,0,0,21,237,
  	1,0,0,0,23,240,1,0,0,0,25,243,1,0,0,0,27,246,1,0,0,0,29,249,1,0,0,0,31,
  	251,1,0,0,0,33,253,1,0,0,0,35,256,1,0,0,0,37,259,1,0,0,0,39,261,1,0,0,
  	0,41,263,1,0,0,0,43,266,1,0,0,0,45,268,1,0,0,0,47,270,1,0,0,0,49,273,
  	1,0,0,0,51,276,1,0,0,0,53,279,1,0,0,0,55,282,1,0,0,0,57,285,1,0,0,0,59,
  	288,1,0,0,0,61,291,1,0,0,0,63,294,1,0,0,0,65,297,1,0,0,0,67,300,1,0,0,
  	0,69,303,1,0,0,0,71,306,1,0,0,0,73,309,1,0,0,0,75,312,1,0,0,0,77,314,
  	1,0,0,0,79,316,1,0,0,0,81,318,1,0,0,0,83,320,1,0,0,0,85,322,1,0,0,0,87,
  	324,1,0,0,0,89,326,1,0,0,0,91,328,1,0,0,0,93,330,1,0,0,0,95,332,1,0,0,
  	0,97,334,1,0,0,0,99,337,1,0,0,0,101,340,1,0,0,0,103,344,1,0,0,0,105,348,
  	1,0,0,0,107,352,1,0,0,0,109,357,1,0,0,0,111,362,1,0,0,0,113,367,1,0,0,
  	0,115,372,1,0,0,0,117,377,1,0,0,0,119,384,1,0,0,0,121,390,1,0,0,0,123,
  	396,1,0,0,0,125,403,1,0,0,0,127,410,1,0,0,0,129,415,1,0,0,0,131,420,1,
  	0,0,0,133,426,1,0,0,0,135,430,1,0,0,0,137,436,1,0,0,0,139,442,1,0,0,0,
  	141,447,1,0,0,0,143,453,1,0,0,0,145,460,1,0,0,0,147,467,1,0,0,0,149,474,
  	1,0,0,0,151,479,1,0,0,0,153,484,1,0,0,0,155,488,1,0,0,0,157,492,1,0,0,
  	0,159,497,1,0,0,0,161,502,1,0,0,0,163,508,1,0,0,0,165,514,1,0,0,0,167,
  	520,1,0,0,0,169,527,1,0,0,0,171,534,1,0,0,0,173,538,1,0,0,0,175,543,1,
  	0,0,0,177,552,1,0,0,0,179,558,1,0,0,0,181,567,1,0,0,0,183,578,1,0,0,0,
  	185,618,1,0,0,0,187,620,1,0,0,0,189,627,1,0,0,0,191,664,1,0,0,0,193,666,
  	1,0,0,0,195,674,1,0,0,0,197,678,1,0,0,0,199,681,1,0,0,0,201,694,1,0,0,
  	0,203,703,1,0,0,0,205,714,1,0,0,0,207,725,1,0,0,0,209,738,1,0,0,0,211,
  	741,1,0,0,0,213,744,1,0,0,0,215,216,5,58,0,0,216,2,1,0,0,0,217,218,5,
  	61,0,0,218,4,1,0,0,0,219,220,5,58,0,0,220,221,5,61,0,0,221,6,1,0,0,0,
  	222,223,5,61,0,0,223,224,5,62,0,0,224,8,1,0,0,0,225,226,5,64,0,0,226,
  	10,1,0,0,0,227,228,5,91,0,0,228,12,1,0,0,0,229,230,5,93,0,0,230,14,1,
  	0,0,0,231,232,5,44,0,0,232,16,1,0,0,0,233,234,5,123,0,0,234,18,1,0,0,
  	0,235,236,5,125,0,0,236,20,1,0,0,0,237,238,5,123,0,0,238,239,5,124,0,
  	0,239,22,1,0,0,0,240,241,5,124,0,0,241,242,5,125,0,0,242,24,1,0,0,0,243,
  	244,5,91,0,0,244,245,5,124,0,0,245,26,1,0,0,0,246,247,5,124,0,0,247,248,
  	5,93,0,0,248,28,1,0,0,0,249,250,5,40,0,0,250,30,1,0,0,0,251,252,5,41,
  	0,0,252,32,1,0,0,0,253,254,5,40,0,0,254,255,5,124,0,0,255,34,1,0,0,0,
  	256,257,5,124,0,0,257,258,5,41,0,0,258,36,1,0,0,0,259,260,5,60,0,0,260,
  	38,1,0,0,0,261,262,5,62,0,0,262,40,1,0,0,0,263,264,5,45,0,0,264,265,5,
  	62,0,0,265,42,1,0,0,0,266,267,5,46,0,0,267,44,1,0,0,0,268,269,5,63,0,
  	0,269,46,1,0,0,0,270,271,5,43,0,0,271,272,5,61,0,0,272,48,1,0,0,0,273,
  	274,5,45,0,0,274,275,5,61,0,0,275,50,1,0,0,0,276,277,5,42,0,0,277,278,
  	5,61,0,0,278,52,1,0,0,0,279,280,5,47,0,0,280,281,5,61,0,0,281,54,1,0,
  	0,0,282,283,5,37,0,0,283,284,5,61,0,0,284,56,1,0,0,0,285,286,5,94,0,0,
  	286,287,5,61,0,0,287,58,1,0,0,0,288,289,5,38,0,0,289,290,5,61,0,0,290,
  	60,1,0,0,0,291,292,5,124,0,0,292,293,5,61,0,0,293,62,1,0,0,0,294,295,
  	5,60,0,0,295,296,5,61,0,0,296,64,1,0,0,0,297,298,5,62,0,0,298,299,5,61,
  	0,0,299,66,1,0,0,0,300,301,5,61,0,0,301,302,5,61,0,0,302,68,1,0,0,0,303,
  	304,5,33,0,0,304,305,5,61,0,0,305,70,1,0,0,0,306,307,5,38,0,0,307,308,
  	5,38,0,0,308,72,1,0,0,0,309,310,5,124,0,0,310,311,5,124,0,0,311,74,1,
  	0,0,0,312,313,5,43,0,0,313,76,1,0,0,0,314,315,5,45,0,0,315,78,1,0,0,0,
  	316,317,5,38,0,0,317,80,1,0,0,0,318,319,5,124,0,0,319,82,1,0,0,0,320,
  	321,5,94,0,0,321,84,1,0,0,0,322,323,5,42,0,0,323,86,1,0,0,0,324,325,5,
  	47,0,0,325,88,1,0,0,0,326,327,5,37,0,0,327,90,1,0,0,0,328,329,5,33,0,
  	0,329,92,1,0,0,0,330,331,5,126,0,0,331,94,1,0,0,0,332,333,5,59,0,0,333,
  	96,1,0,0,0,334,335,5,97,0,0,335,336,5,115,0,0,336,98,1,0,0,0,337,338,
  	5,105,0,0,338,339,5,115,0,0,339,100,1,0,0,0,340,341,5,108,0,0,341,342,
  	5,101,0,0,342,343,5,116,0,0,343,102,1,0,0,0,344,345,5,118,0,0,345,346,
  	5,97,0,0,346,347,5,114,0,0,347,104,1,0,0,0,348,349,5,117,0,0,349,350,
  	5,115,0,0,350,351,5,101,0,0,351,106,1,0,0,0,352,353,5,102,0,0,353,354,
  	5,114,0,0,354,355,5,111,0,0,355,356,5,109,0,0,356,108,1,0,0,0,357,358,
  	5,102,0,0,358,359,5,117,0,0,359,360,5,110,0,0,360,361,5,99,0,0,361,110,
  	1,0,0,0,362,363,5,116,0,0,363,364,5,121,0,0,364,365,5,112,0,0,365,366,
  	5,101,0,0,366,112,1,0,0,0,367,368,5,119,0,0,368,369,5,105,0,0,369,370,
  	5,116,0,0,370,371,5,104,0,0,371,114,1,0,0,0,372,373,5,119,0,0,373,374,
  	5,97,0,0,374,375,5,105,0,0,375,376,5,116,0,0,376,116,1,0,0,0,377,378,
  	5,114,0,0,378,379,5,101,0,0,379,380,5,116,0,0,380,381,5,117,0,0,381,382,
  	5,114,0,0,382,383,5,110,0,0,383,118,1,0,0,0,384,385,5,105,0,0,385,386,
  	5,110,0,0,386,387,5,110,0,0,387,388,5,101,0,0,388,389,5,114,0,0,389,120,
  	1,0,0,0,390,391,5,111,0,0,391,392,5,117,0,0,392,393,5,116,0,0,393,394,
  	5,101,0,0,394,395,5,114,0,0,395,122,1,0,0,0,396,397,5,97,0,0,397,398,
  	5,116,0,0,398,399,5,111,0,0,399,400,5,109,0,0,400,401,5,105,0,0,401,402,
  	5,99,0,0,402,124,1,0,0,0,403,404,5,115,0,0,404,405,5,116,0,0,405,406,
  	5,97,0,0,406,407,5,116,0,0,407,408,5,105,0,0,408,409,5,99,0,0,409,126,
  	1,0,0,0,410,411,5,110,0,0,411,412,5,117,0,0,412,413,5,108,0,0,413,414,
  	5,108,0,0,414,128,1,0,0,0,415,416,5,116,0,0,416,417,5,114,0,0,417,418,
  	5,117,0,0,418,419,5,101,0,0,419,130,1,0,0,0,420,421,5,102,0,0,421,422,
  	5,97,0,0,422,423,5,108,0,0,423,424,5,115,0,0,424,425,5,101,0,0,425,132,
  	1,0,0,0,426,427,5,73,0,0,427,428,5,110,0,0,428,429,5,116,0,0,429,134,
  	1,0,0,0,430,431,5,73,0,0,431,432,5,110,0,0,432,433,5,116,0,0,433,434,
  	5,51,0,0,434,435,5,50,0,0,435,136,1,0,0,0,436,437,5,73,0,0,437,438,5,
  	110,0,0,438,439,5,116,0,0,439,440,5,54,0,0,440,441,5,52,0,0,441,138,1,
  	0,0,0,442,443,5,82,0,0,443,444,5,101,0,0,444,445,5,97,0,0,445,446,5,108,
  	0,0,446,140,1,0,0,0,447,448,5,70,0,0,448,449,5,108,0,0,449,450,5,111,
  	0,0,450,451,5,97,0,0,451,452,5,116,0,0,452,142,1,0,0,0,453,454,5,68,0,
  	0,454,455,5,111,0,0,455,456,5,117,0,0,456,457,5,98,0,0,457,458,5,108,
  	0,0,458,459,5,101,0,0,459,144,1,0,0,0,460,461,5,78,0,0,461,462,5,117,
  	0,0,462,463,5,109,0,0,463,464,5,98,0,0,464,465,5,101,0,0,465,466,5,114,
  	0,0,466,146,1,0,0,0,467,468,5,83,0,0,468,469,5,116,0,0,469,470,5,114,
  	0,0,470,471,5,105,0,0,471,472,5,110,0,0,472,473,5,103,0,0,473,148,1,0,
  	0,0,474,475,5,66,0,0,475,476,5,111,0,0,476,477,5,111,0,0,477,478,5,108,
  	0,0,478,150,1,0,0,0,479,480,5,67,0,0,480,481,5,104,0,0,481,482,5,97,0,
  	0,482,483,5,114,0,0,483,152,1,0,0,0,484,485,5,83,0,0,485,486,5,101,0,
  	0,486,487,5,116,0,0,487,154,1,0,0,0,488,489,5,77,0,0,489,490,5,97,0,0,
  	490,491,5,112,0,0,491,156,1,0,0,0,492,493,5,76,0,0,493,494,5,105,0,0,
  	494,495,5,115,0,0,495,496,5,116,0,0,496,158,1,0,0,0,497,498,5,68,0,0,
  	498,499,5,105,0,0,499,500,5,99,0,0,500,501,5,116,0,0,501,160,1,0,0,0,
  	502,503,5,65,0,0,503,504,5,114,0,0,504,505,5,114,0,0,505,506,5,97,0,0,
  	506,507,5,121,0,0,507,162,1,0,0,0,508,509,5,84,0,0,509,510,5,117,0,0,
  	510,511,5,112,0,0,511,512,5,108,0,0,512,513,5,101,0,0,513,164,1,0,0,0,
  	514,515,5,85,0,0,515,516,5,110,0,0,516,517,5,105,0,0,517,518,5,111,0,
  	0,518,519,5,110,0,0,519,166,1,0,0,0,520,521,5,86,0,0,521,522,5,101,0,
  	0,522,523,5,99,0,0,523,524,5,116,0,0,524,525,5,111,0,0,525,526,5,114,
  	0,0,526,168,1,0,0,0,527,528,5,84,0,0,528,529,5,101,0,0,529,530,5,110,
  	0,0,530,531,5,115,0,0,531,532,5,111,0,0,532,533,5,114,0,0,533,170,1,0,
  	0,0,534,535,5,65,0,0,535,536,5,110,0,0,536,537,5,121,0,0,537,172,1,0,
  	0,0,538,539,5,86,0,0,539,540,5,111,0,0,540,541,5,105,0,0,541,542,5,100,
  	0,0,542,174,1,0,0,0,543,544,5,70,0,0,544,545,5,117,0,0,545,546,5,110,
  	0,0,546,547,5,99,0,0,547,548,5,116,0,0,548,549,5,111,0,0,549,550,5,114,
  	0,0,550,176,1,0,0,0,551,553,7,0,0,0,552,551,1,0,0,0,553,554,1,0,0,0,554,
  	552,1,0,0,0,554,555,1,0,0,0,555,556,1,0,0,0,556,557,6,88,0,0,557,178,
  	1,0,0,0,558,562,5,35,0,0,559,561,8,1,0,0,560,559,1,0,0,0,561,564,1,0,
  	0,0,562,560,1,0,0,0,562,563,1,0,0,0,563,565,1,0,0,0,564,562,1,0,0,0,565,
  	566,6,89,1,0,566,180,1,0,0,0,567,568,5,47,0,0,568,569,5,47,0,0,569,573,
  	1,0,0,0,570,572,8,2,0,0,571,570,1,0,0,0,572,575,1,0,0,0,573,571,1,0,0,
  	0,573,574,1,0,0,0,574,576,1,0,0,0,575,573,1,0,0,0,576,577,6,90,2,0,577,
  	182,1,0,0,0,578,579,5,47,0,0,579,580,5,42,0,0,580,584,1,0,0,0,581,583,
  	9,0,0,0,582,581,1,0,0,0,583,586,1,0,0,0,584,585,1,0,0,0,584,582,1,0,0,
  	0,585,587,1,0,0,0,586,584,1,0,0,0,587,588,5,42,0,0,588,589,5,47,0,0,589,
  	590,1,0,0,0,590,591,6,91,3,0,591,184,1,0,0,0,592,593,5,39,0,0,593,594,
  	5,39,0,0,594,595,5,39,0,0,595,599,1,0,0,0,596,598,9,0,0,0,597,596,1,0,
  	0,0,598,601,1,0,0,0,599,600,1,0,0,0,599,597,1,0,0,0,600,602,1,0,0,0,601,
  	599,1,0,0,0,602,603,5,39,0,0,603,604,5,39,0,0,604,619,5,39,0,0,605,606,
  	5,34,0,0,606,607,5,34,0,0,607,608,5,34,0,0,608,612,1,0,0,0,609,611,9,
  	0,0,0,610,609,1,0,0,0,611,614,1,0,0,0,612,613,1,0,0,0,612,610,1,0,0,0,
  	613,615,1,0,0,0,614,612,1,0,0,0,615,616,5,34,0,0,616,617,5,34,0,0,617,
  	619,5,34,0,0,618,592,1,0,0,0,618,605,1,0,0,0,619,186,1,0,0,0,620,624,
  	7,3,0,0,621,623,7,4,0,0,622,621,1,0,0,0,623,626,1,0,0,0,624,622,1,0,0,
  	0,624,625,1,0,0,0,625,188,1,0,0,0,626,624,1,0,0,0,627,635,5,96,0,0,628,
  	629,5,92,0,0,629,634,5,96,0,0,630,631,5,92,0,0,631,634,5,92,0,0,632,634,
  	9,0,0,0,633,628,1,0,0,0,633,630,1,0,0,0,633,632,1,0,0,0,634,637,1,0,0,
  	0,635,636,1,0,0,0,635,633,1,0,0,0,636,638,1,0,0,0,637,635,1,0,0,0,638,
  	639,5,96,0,0,639,190,1,0,0,0,640,648,5,34,0,0,641,642,5,92,0,0,642,647,
  	5,34,0,0,643,644,5,92,0,0,644,647,5,92,0,0,645,647,9,0,0,0,646,641,1,
  	0,0,0,646,643,1,0,0,0,646,645,1,0,0,0,647,650,1,0,0,0,648,649,1,0,0,0,
  	648,646,1,0,0,0,649,651,1,0,0,0,650,648,1,0,0,0,651,665,5,34,0,0,652,
  	660,5,39,0,0,653,654,5,92,0,0,654,659,5,39,0,0,655,656,5,92,0,0,656,659,
  	5,92,0,0,657,659,9,0,0,0,658,653,1,0,0,0,658,655,1,0,0,0,658,657,1,0,
  	0,0,659,662,1,0,0,0,660,661,1,0,0,0,660,658,1,0,0,0,661,663,1,0,0,0,662,
  	660,1,0,0,0,663,665,5,39,0,0,664,640,1,0,0,0,664,652,1,0,0,0,665,192,
  	1,0,0,0,666,667,5,102,0,0,667,668,3,191,95,0,668,194,1,0,0,0,669,675,
  	3,199,99,0,670,675,3,201,100,0,671,675,3,203,101,0,672,675,3,205,102,
  	0,673,675,3,211,105,0,674,669,1,0,0,0,674,670,1,0,0,0,674,671,1,0,0,0,
  	674,672,1,0,0,0,674,673,1,0,0,0,675,196,1,0,0,0,676,679,3,207,103,0,677,
  	679,3,209,104,0,678,676,1,0,0,0,678,677,1,0,0,0,679,198,1,0,0,0,680,682,
  	7,5,0,0,681,680,1,0,0,0,681,682,1,0,0,0,682,691,1,0,0,0,683,687,7,6,0,
  	0,684,686,7,7,0,0,685,684,1,0,0,0,686,689,1,0,0,0,687,685,1,0,0,0,687,
  	688,1,0,0,0,688,692,1,0,0,0,689,687,1,0,0,0,690,692,5,48,0,0,691,683,
  	1,0,0,0,691,690,1,0,0,0,692,200,1,0,0,0,693,695,7,5,0,0,694,693,1,0,0,
  	0,694,695,1,0,0,0,695,696,1,0,0,0,696,698,5,48,0,0,697,699,7,8,0,0,698,
  	697,1,0,0,0,699,700,1,0,0,0,700,698,1,0,0,0,700,701,1,0,0,0,701,202,1,
  	0,0,0,702,704,7,5,0,0,703,702,1,0,0,0,703,704,1,0,0,0,704,705,1,0,0,0,
  	705,706,5,48,0,0,706,707,5,120,0,0,707,709,1,0,0,0,708,710,7,9,0,0,709,
  	708,1,0,0,0,710,711,1,0,0,0,711,709,1,0,0,0,711,712,1,0,0,0,712,204,1,
  	0,0,0,713,715,7,5,0,0,714,713,1,0,0,0,714,715,1,0,0,0,715,716,1,0,0,0,
  	716,717,5,48,0,0,717,718,5,98,0,0,718,720,1,0,0,0,719,721,7,10,0,0,720,
  	719,1,0,0,0,721,722,1,0,0,0,722,720,1,0,0,0,722,723,1,0,0,0,723,206,1,
  	0,0,0,724,726,7,5,0,0,725,724,1,0,0,0,725,726,1,0,0,0,726,728,1,0,0,0,
  	727,729,7,7,0,0,728,727,1,0,0,0,729,730,1,0,0,0,730,728,1,0,0,0,730,731,
  	1,0,0,0,731,732,1,0,0,0,732,734,5,46,0,0,733,735,7,7,0,0,734,733,1,0,
  	0,0,735,736,1,0,0,0,736,734,1,0,0,0,736,737,1,0,0,0,737,208,1,0,0,0,738,
  	739,3,207,103,0,739,740,3,213,106,0,740,210,1,0,0,0,741,742,3,199,99,
  	0,742,743,3,213,106,0,743,212,1,0,0,0,744,746,7,11,0,0,745,747,7,5,0,
  	0,746,745,1,0,0,0,746,747,1,0,0,0,747,749,1,0,0,0,748,750,7,7,0,0,749,
  	748,1,0,0,0,750,751,1,0,0,0,751,749,1,0,0,0,751,752,1,0,0,0,752,214,1,
  	0,0,0,32,0,554,562,573,584,599,612,618,624,633,635,646,648,658,660,664,
  	674,678,681,687,691,694,700,703,711,714,722,725,730,736,746,751,4,6,0,
  	0,0,2,0,0,3,0,0,4,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  opencmllexerLexerStaticData = staticData.release();
}

}

OpenCMLLexer::OpenCMLLexer(CharStream *input) : Lexer(input) {
  OpenCMLLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *opencmllexerLexerStaticData->atn, opencmllexerLexerStaticData->decisionToDFA, opencmllexerLexerStaticData->sharedContextCache);
}

OpenCMLLexer::~OpenCMLLexer() {
  delete _interpreter;
}

std::string OpenCMLLexer::getGrammarFileName() const {
  return "OpenCML.g4";
}

const std::vector<std::string>& OpenCMLLexer::getRuleNames() const {
  return opencmllexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& OpenCMLLexer::getChannelNames() const {
  return opencmllexerLexerStaticData->channelNames;
}

const std::vector<std::string>& OpenCMLLexer::getModeNames() const {
  return opencmllexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& OpenCMLLexer::getVocabulary() const {
  return opencmllexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView OpenCMLLexer::getSerializedATN() const {
  return opencmllexerLexerStaticData->serializedATN;
}

const atn::ATN& OpenCMLLexer::getATN() const {
  return *opencmllexerLexerStaticData->atn;
}




void OpenCMLLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  opencmllexerLexerInitialize();
#else
  ::antlr4::internal::call_once(opencmllexerLexerOnceFlag, opencmllexerLexerInitialize);
#endif
}
