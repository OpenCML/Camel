type Signal = Vector<Int, 2>;

// 实体表达式
// 字面量
123;
2.3e-10;
'string';
{
    a: 1,
    b: 2
};
[1, 2, 3];
// 变量
let a = A(b + c);
let signal1: Signal = [1, 2];
let signal2: Signal = [3, 4];

// // 函子表达式
// func process(signals: Signal[]): Void {
//     // 函子调用
//     let res1 = signals[0]->comp1->comp2;
//     res1[0]->analyzer1;
//     let res2 = signals[1]->comp3;
//     [res1[1], res2]->add->analyzer2;
// };

// with <capture: Any, condition: Functor, update: Functor>
// sync func test(target: Functor) {
//     return ifexpr(condition<capture>(), {
//         exec<{
//             update<capture>();
//             test<capture, condition, update>(target)
//         }>(target);
//     }, null)
// };

// // 可视化注解
// @{ x: 3, y: 1, style: 'bold', color: 'red' }
// '''
// Impact of System Noise and Nonlinearities on a 16-QAM Signal in a Radio-over-Fiber Transmission
// ''';

// '''
// The relative constellation ...
// '''@{ x: 2, y: 3, style: 'alert-info' };

// @[14, 7]
// @{ boxed: true, color: 'blue' }
// func PowerControlEl(input: Signal): Signal {
//     'Power control'@[6, 0];
//     let [dcOutput, powerOutput, ] = input->PowerMeterEl;
//     dcOutput->Ground;
//     return input->ParameterController<
//         [powerInput, powerOutput]->Sub
//     >->AmpSysEl;
// };
