@{ x: 3, y: 1, style: 'bold', color: 'red' }
'''
Impact of System Noise and Nonlinearities on a 16-QAM Signal in a Radio-over-Fiber Transmission
''';

'''
The relative constellation ...
'''@{ x: 2, y: 3, style: 'alert-info' };

use { Const, Ground, Sub } from 'phot/units';
use { AmpSysEl, DC_Source, Linearizer, Resample } from 'phot/el';
use { FiberNLS, ModulatorMZ, Photodiode, SignalAnalyzer } from 'phot/op';
use { NumericalAnalyzer2D, PowerMeterEl, WDM_MUX_N_1_Ideal } from 'phot/ana';
use { ParameterController } from 'phot/ctrl';
use { Rx_El_mQAM_BER, Tx_El_mQAM } from 'phot/tr';

let photodiodeSetting: String = {
    temperature: 300`K`
};

type test1 = Set<Map<String, { a: Number, b: Tuple<Number, List> } & { c: Any }>> | (Vector<Number, 5> | Tensor<Number, [5, 5]>);
type test2 = (Array<String> | Union<Int, String>[])[] | { a: Number, b: String }[] | (Int | String)[];

let var2 = b->(a.at(b))<>()[1]()@{}();
let var3 = c->a.b->d;
var a = 1;
wait a = 1;
let b = [a, b, c];
let b_ = [||];
let c = {};
let d = { b: a };
let e = (1, 2);
let e_ = (|3|);
let f = {[a]:b};

let powerInput = Const<5`V`>;

type Power = {
    dcOutput: ElSignal,
    powerOutput: ElSignal
};

@[14, 7]
@{ boxed: true, color: 'blue' }
func PowerControlEl(input: ElSignal): ElSignal {
    'Power control'@[6, 0];
    let [dcOutput, powerOutput, ] = input->PowerMeterEl;
    dcOutput->Ground;
    return input->ParameterController<
        [powerInput, powerOutput]->Sub
    >->AmpSysEl;
};

// Electrical domain
@{ boxed: true, color: 'blue' }
func SignalGenEl(): ElSignal {
    'Electrical domain'@[10, 0];
    let linearSignal: ElSignal = Rx_El_mQAM_BER->PowerControlEl->Linearizer;
    let dcSource = DC_Source<{ a: 0.5`V` }>;
    return [linearSignal, dcSource]->AddSignalsEl;
};

// Optical domain
@{ boxed: true, color: 'blue' }
func SignalProcOp(input@[0, 0]: ElSignal): ElSignal {
    'Optical domain'@[10, 0];
    let modulatedOpSig = [input, LaserCW<azimuth: 0`deg`>]->ModulatorMZ<30`dB`>;
    modulatedOpSig->Resample<abc, centerFrequency: 192.1e12`Hz`>@[2, 2]->SignalAnalyzer<eye>@[4, 5];
    let opSig: OpSignal = modulatedOpSig->FiberNLS<10`KM`>->WDM_MUX_N_1_Ideal<NoiseWhiteGaussOpt>;
    return opSig->Photodiode<photodiodeSetting>;
};

// Electrical domain
@{ boxed: true, color: 'blue' }
func SignalRecvEl(input: ElSignal):Void {
    'Electrical domain'@[0, 0];
    let samples = input->Resample<centerFrequency: 193.1e12`Hz`>;
    let ber = samples->Rx_El_mQAM_BER;
    [powerInput, ber]->NumericalAnalyzer2D;
    samples->SignalAnalyzer<hist>;
};

// Total system
SignalGenEl->SignalProcOp->SignalRecvEl;

with <
    loader: Functor = psl,
    loader: Functor = psl
>
inner static func load(path: string): Any {
    // inner func
};

/*
* This PSL module will be imported by interpreter automatically,
* and can be accessed Anywhere in Any PSL script.
*/ 

// psl, json, phtc, xml, toml

with <loader: Functor = psl>
inner static func load(path: string): Any {
    // inner func
};

with <path: string, ftype: string = 'psl'>
inner static func save(entity: Any) :Void{
    // inner func
};

with <stream: string = 'stdout'>
inner static func print(data: Any):Void {
    // inner func
};

with <diagram: Functor = eye>
inner static func analyze(data: Any):Void {
    // inner func:Void
};

inner static  func ifexpr(
    condition: Bool,
    trueValue: Any,
    falseValue: Any
):Void {
    // return trueValue if condition is true, otherwise return falseValue
};

with <after: Functor>
inner  func exec(block: Functor): Void {
    // execute the following block synchronously
    // if after is specified, run it after execution of block
};

with <after: Functor>
inner static  func skip(entity: Any): Void {
    // skip an entity in an entity chain
};

use else = skip;

static  func if(condition: Bool) :Void{
    return ifexpr(condition, exec, skip<skip>)
};

with <capture: Any, condition: Functor, update: Functor>
 func test(target: Functor):Void {
    return ifexpr(condition<capture>(), ()=>{
        exec<()=>{
            update<capture>();
            test<capture, condition, update>(target)
        }>(target);
    }, null)
};

 func placeComponents(
    startIndex: Number,
    count: Number,
    dist: Point,
    pos: Point
): Void {
    let i = startIndex;
    ()=>{
        // create instance of LaserCW and place it
        let laser = LaserCW@[pos['x'], pos['y']];
        let laserRect = laser['meta']['rect'];
        // create instance of Analyzer and place it
        let analyzer = Analyzer@[pos['x'] + dist['x'] + laserRect['width'], pos['y']];
        // connect laser to analyzer;
        laser()->analyzer;
        // move to next position
        pos['y'] += pos['y'] + dist['y'] + laserRect['height'];
    }
};
