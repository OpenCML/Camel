/*
* This PSL module will be imported by interpreter automatically,
* and can be accessed Anywhere in Any PSL script.
*/

@{x: 3, y: 1, style: "bold", color: "red"}
'''
Impact of System Noise and Nonlinearities on a 16-QAM Signal in a Radio-over-Fiber Transmission
1
2
''';

'''
The relative constellation ...
'''
@{x: 2, y: 3, style: "alert-info"};

use {a,b} from<psl> "haha";

// balabala

# text comment

type test1 = Set<Map <String, { 
    a: Number, 
    b: Tuple<Number, List, > } & { c: Any }> > | (Vector<Number, 5> | Tensor<Number, [5, 5]>);
type test2 = (Array<String> | Union<Int, String>[])[1][2];

let Power = {
    dcOutput : ElSignal,
    // test comment
    powerOutput : ElSignal # comment test
};

let var2 = b->(a.at(b))<>()[1]()@{}() [c,];
let var3 = c->a.b->d e;

inner sync static func load(path: String) : Any
{
    # inner func
};


# 函子定义，修饰符顺序
sync static func if(condition: Bool) {

    # block

    return ifexpr(condition, exec, skip<skip>)
};



# 换行测试
with <capture: Any, condition: Functor, update: Functor>
// comment to be deleted
sync func test(target: Functor) {
    return ifexpr(condition<capture>(), { # comment test
        exec<{
            // comment
            // comment 2
            update<capture>();


            test<capture, condition, update>(target);
        }>(target);
    }, null)
};

with <capture: Any, condition: Functor, /* block cmt */ update: Functor>
sync func test(target: Functor) {
    /* 
    block cmt
    */
    return ifexpr(condition<capture>(), 
    { // comment
        exec<
        {
            update<capture>(); // comment
            test<capture, condition, update>(target)
        }>(target);
    }, null)
};

# 单语句匿名函子/单双引号测试
sync func placeComponents(
    startIndex: Number, count: Number, // best
    dist: Point,
    // node
    pos: Point
): Void {
    let i = startIndex; // test
    for(i, {i < startIndex + count}, /* block cmt */ {i += 1}) {
        # create instance of LaserCW and place it
        let laser = LaserCW@[pos["x"], pos["y"]];
        let laserRect = laser["meta"]["rect"];
        # create instance of Analyzer and place it
        let analyzer = Analyzer@[pos["x"] + dist["x"] + laserRect["width"], pos["y"]];
        # connect laser to analyzer;
        laser()->analyzer;
        # move to next position
        pos["y"] += pos["y"] + dist["y"] + laserRect["height"];
    }
};

# hahaha