type Signal = Array<Int, 2>

atomic func add(sig1: Signal, sig2: Signal): Signal {
    return [sig1[0] + sig2[0], sig1[1] + sig2[1]]
}

inner func print(any: Any): Void {
    // print the signal
}

with <src: Signal>
inner func map(f: (a: Int) => Int): Signal {
    return [f(src[0]), f(src[1])]
}

inner func comp1(signal: Signal): Signal {
    return signal.map((x: Int): Int => x + 1)
}

inner func comp2(signal: Signal): Signal {
    return signal.map((x: Int) => x / 2)
}

inner func comp3(signal: Signal): Signal {
    return signal.map((x: Int) => x * 3)
}

inner func analyzer1(signal: Signal): Void {
    print('Analyzer 1: ', signal)
}

inner func analyzer2(signal: Signal): Void {
    print('Analyzer 2: ', signal)
}

func process(signals: Signal[]): Void {
    let res1 = signals[0]->comp1->comp2
    res1[0]->analyzer1
    let res2 = signals[1]->comp3
    [res1[1], res2]->add->analyzer2
}

let signal1: Signal = [1, 2]
let signal2: Signal = [3, 4]

[signal1, signal2]->process->print
