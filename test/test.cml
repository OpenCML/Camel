func print() {return 0}
func sleep() {return 0}
func len() {return 0}
func push(var input: any) {return 0}
func head() {return 0}
func tail() {return 0}
func new() {return 0}
func dense() {return 0}

inner type Tensor = int

type Model = (x: Tensor) => Tensor

with <var weights: Tensor[], var biases: Tensor[]>
macro sync func MLP(input: int, configs: (int, Model?)[]): Model {
    return if configs.len() == 0 then {
        return 0
    } else {
        let output, act = configs.head()
        wait weights.push(new([input, output]))
        wait biases.push(new([output]))
        let layer = dense<act ?? relu, weights, biases>
        let rest = wait MLP<weights, biases>(output, configs.tail())
        // return layer..rest
        return rest
    }
}

// with <var weights: Tensor[], var biases: Tensor[]>
// macro sync func MLP(input: int, configs: (int, Model?)[]): Model {
//     let output, act = configs.head()
//     wait weights.push(new([input, output]))
//     wait biases.push(new([output]))
//     return rest
// }