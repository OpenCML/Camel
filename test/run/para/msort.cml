module msort

import { now } from time
import { seed, rand, shuffle } from random

// func next_val(x: float): float {
//     let y = x + 73.7
//     if y >= 1000.0 then y - 1000.0 else y
// }

// func gen_arr(n: int, seed: float): float[] {
//     if n <= 1 then [seed] else {
//         let s1 = next_val(seed)
//         return concat([seed], gen_arr(n - 1, s1))
//     }
// }

// func merge(left: float[], right: float[]): float[] {
//     if len(left) == 0 then right else
//     if len(right) == 0 then left else {
//         let a = head(left)
//         let b = head(right)
//         return if a <= b then
//             concat([a], merge(left->slice<1, len(left)>, right))
//         else
//             concat([b], merge(left, right->slice<1, len(right)>))
//     }
// }

// func half(n: int): int {
//     if n <= 1 then 0 else 1 + half(n - 2)
// }

// func mergesort(a: float[]): float[] sync {
//     if len(a) <= 1 then a else {
//         let mid = half(len(a))
//         let l = mergesort(a->slice<0, mid>)
//         let r = mergesort(a->slice<mid, len(a)>)
//         return merge(l, r)
//     }
// }

func main(): int sync {
    let n = 3000
    let s = 7
    seed(s)
    'Generating {} values (seed={})...'->format<n, s>->println
    let arr = range(0, n)->shuffle
    'Generated {}.'->format<arr>->println

    // 'Start sorting {} numbers...'->format<n>->println
    // let start = now()
    // let sorted = mergesort(arr)
    // let duration = now() - start

    // 'Sorted (first {} shown):'->format<n>->println
    // sorted
    //     ->map<(x: float): string => { return '{}'->format<x> }>
    //     ->join<' '>
    //     ->println

    // 'Mergesort completed in {} seconds'->format<duration>->println
    return 0
}