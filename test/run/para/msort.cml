module msort

import { now } from time
import { seed, rand, shuffle } from random
import { sorted, sort, merge_sorted_arrays } from algo

func merge(lhs: int[], rhs: int[]): int[] sync {
    return merge_sorted_arrays(lhs, rhs)
    // return concat(lhs, rhs)->sorted
}

func mergesort(arr: int[]): int[] sync {
    let start = now()
    let res = if len(arr) <= 10000 then sort(arr) else {
        let mid = len(arr) / 2
        let lhs = arr->slice<0, mid>->mergesort
        let rhs = arr->slice<mid, len(arr)>->mergesort
        return merge(lhs, rhs)
    }
    let duration = now() - start
    println('MergeSorted {} elements in {} seconds.'->format<len(arr), duration>)
    return res
}

func main(): int sync {
    let n = 10000000
    let m = 100
    let s = 1

    seed(s)

    'Generating {} values (seed={})...'->format<n, s>->println
    let arr = range(0, n)->shuffle
    'First {} values (unsorted):'->format<m>->println
    arr->slice<0, m>->println

    'Start sorting {} numbers...'->format<n>->println
    let start = now()
    let sorted = mergesort(arr)
    let duration = now() - start

    'Sorted (first {} shown):'->format<m>->println
    sorted->slice<0, m>->println

    'Mergesort completed in {} seconds'->format<duration>->println
    return 0
}