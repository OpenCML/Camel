module main

// func merge(left: vector<int>, right: vector<int>): vector<int> sync {
//     let result = []
//     let i = 0
//     let j = 0
    
//     while (i < left.len() && j < right.len()) {
//         if (left[i] <= right[j]) then {
//             result.push(left[i])
//             i = i + 1
//         } else {
//             result.push(right[j])
//             j = j + 1
//         }
//     }
    
//     while (i < left.len()) {
//         result.push(left[i])
//         i = i + 1
//     }
    
//     while (j < right.len()) {
//         result.push(right[j])
//         j = j + 1
//     }
    
//     return result
// }

func merge_sort(arr: vector<int>): int[] sync {
    if (arr.len() <= 1) then {
        return arr
    }
    
    let mid = arr.len() / 2
    let left = arr.slice(0, mid)
    let right = arr.slice(mid, arr.len())
    
    let sorted_left = merge_sort(left)
    let sorted_right = merge_sort(right)
    
    return merge(sorted_left, sorted_right)
}

func main() sync {
    let arr = [64, 34, 25, 12, 22, 11, 90]
    println("Original array: {}", arr)
    let sorted_arr = merge_sort(arr)
    println("Sorted array: {}", sorted_arr)
    
    return 0
}