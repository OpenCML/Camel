@{ x: 3, y: 1, style: 'bold', color: 'red' }
'''
Impact of System Noise and Nonlinearities on a 16-QAM Signal in a Radio-over-Fiber Transmission
''';

'''
The relative constellation ...
'''@{ x: 2, y: 3, style: 'alert-info' };

a b c(f) d;
a->b->c->d;
a b<v> c a->b->c;
a->b a b a<e>->b;
a(b, d(f)->e(g));
let a = d + (a + b) * c / 2;

(() => a + b)();

/*
* This PSL module will be imported by interpreter automatically,
* and can be accessed Anywhere in Any PSL script.
*/ 

with <loader: Functor = psl>
inner static sync func load(path: String): Any {
    // inner func
};

with <path: String, ftype: String = 'psl'>
inner static sync func save(entity: Any) {
    // inner func
};

use from = load;

with <stream: String = 'stdout'>
inner static func print(data: Any) {
    // inner func
};

with <diagram: Functor = eye>
inner static func analyze(data: Any) {
    // inner func
};

ident[1]->fn;
nf->ident[1];
nf->ident[1]->fn;
ident[1][id]->fn;
a->b->c;

use { Const, Ground, Sub } from<xml> 'phot/units' as Any;
use { Rx_El_mQAM_BER, Tx_El_mQAM } from 'phot/tr';

type ElSignal = {
    power: Number,
    freq: Number,
    phase: Number
};

type Point = {
    x: Number,
    y: Number
};

let photodiodeSetting = {
    temperature: 300`K`
};

let Power = {
    dcOutput: ElSignal,
    powerOutput: ElSignal
};

let a = a;

@[14, 7]
@{ boxed: true, color: 'blue' }
sync func PowerControlEl(input: ElSignal): ElSignal {
    'Power control'@[6, 0];
    let [dcOutput, powerOutput] = input->PowerMeterEl;
    dcOutput->Ground<e, 5`v`>;
    return input->ParameterController<
        [powerInput, powerOutput]->Sub
    >@[2, 2]->AmpSysEl;
};

with <capture: Any, condition: Functor, update: Functor>
sync func test(target: Functor) {
    return ifexpr(condition<capture>(), {
        exec<{
            update<capture>;
            test<capture, condition, update>(target);
        }>(target);
    }, null);
};

sync func placeComponents(
    startIndex: Number,
    count: Number,
    dist: Point,
    pos: Point
): Void {
    i := startIndex;
    // loop to create instances
    for(i, { i < startIndex + count; }, { i = i + 1; }) {
        let laser = LaserCW@[pos.x, pos.y];
        let laserRect = laser.meta.rect;
        let analyzer = Analyzer@[pos.x + dist.x + laserRect.width, pos.y];
        laser()->analyzer[i + 1];
        pos.y += pos.y + dist.y + laserRect.height;
    };
};

bus.on('ask-for-authorization', sync (event: String): Array<String> => {
    otp['value'] = '';
    cancelled = true;
    isActive['value'] = true;
    wrongOtp['value'] = false;
    targetEvent = event;
    
    return await new Promise((resolve: Int, reject: Int) => {
        let stopWatch = watch(isActive, (newVal: Int) => {
            if(!newVal) {
                stopWatch();
                if(cancelled) {
                    reject();
                } else {
                    resolve(otp.value);
                };
            };
        });
    });
});
