@{ x: 3, y: 1, style: 'bold', color: 'red' }
'''
Impact of System Noise and Nonlinearities on a 16-QAM Signal in a Radio-over-Fiber Transmission
''';

'''
The relative constellation ...
'''@{ x: 2, y: 3, style: 'alert-info' };

a->b->c->d;
a(b, d(f)->e(g));
let a = d + (a + b) * c / 2;

(() => a + b)();

/*
* This PSL module will be imported by interpreter automatically,
* and can be accessed Anywhere in Any PSL script.
*/ 

with <loader: Functor = psl>
inner func load(path: String): Any {
    // inner func
};

with <path: String, ftype: String = 'psl'>
inner func save(entity: Any) {
    // inner func
};

with <stream: String = 'stdout'>
inner func print(data: Any) {
    // inner func
};

with <diagram: Functor = eye>
inner func analyze(data: Any) {
    // inner func
};

ident[1]->fn;
nf->ident[1];
nf->ident[1]->fn;
ident[1][id]->fn;
a->b->c;

use { Const, Ground, Sub } from 'phot/units';
use { Rx_El_mQAM_BER, Tx_El_mQAM } from 'phot/tr';

type ElSignal = {
    power: Number,
    freq: Number,
    phase: Number
};

type Point = {
    x: Number,
    y: Number
};

let photodiodeSetting = {
    temperature: 300`K`
};

let Power = {
    dcOutput: ElSignal,
    powerOutput: ElSignal
};

let a = a;

@[14, 7]
@{ boxed: true, color: 'blue' }
func PowerControlEl(input: ElSignal): ElSignal {
    'Power control'@[6, 0];
    let [dcOutput, powerOutput] = input->PowerMeterEl;
    dcOutput->Ground<e, 5`v`>;
    return input->ParameterController<
        [powerInput, powerOutput]->Sub
    >@[2, 2]->AmpSysEl;
};

with <capture: Any, condition: Functor, update: Functor>
func test(target: Functor): Void {
    return ifexpr(condition<capture>(), () => {
        exec<() => {
            update<capture>();
            test<capture, condition, update>(target)
        }>(target);
    }, null)
};

type Point = {
    x: Number,
    y: Number
};

func placeComponents(
    startIndex: Number,
    count: Number,
    dist: Point,
    pos: Point
): Void {
    let i = startIndex;
    () => {
        // create instance of LaserCW and place it
        let laser = LaserCW@[pos['x'], pos['y']];
        let laserRect = laser['meta']['rect'];
        // create instance of Analyzer and place it
        let analyzer = Analyzer@[pos['x'] + dist['x'] + laserRect['width'], pos['y']];
        // connect laser to analyzer;
        laser()->analyzer;
        // move to next position
        pos['y'] += pos['y'] + dist['y'] + laserRect['height'];
    }
};
