module nn

export outer type Tensor = 'nn::Tensor'

export type Model = (x: Tensor) => Tensor

with <weights: Tensor, biases: Tensor>
export inner func linear(x: Tensor): Tensor {
    // return 'std::linear'
}

with <activation: Model, weights: Tensor, biases: Tensor>
export func dense(x: Tensor): Tensor {
    return x->linear<weights, biases>->activation
}

with <prob: float>
export inner func dropout(x: Tensor): Tensor {
    // return 'std::dropout'
}

export inner func relu(x: Tensor): Tensor {
    // return 'std::relu'
}

export inner func sigmoid(x: Tensor): Tensor {
    // return 'std::sigmoid'
}

export inner func tanh(x: Tensor): Tensor {
    // return 'std::tanh'
}

export inner func softmax(x: Tensor): Tensor {
    // return 'std::softmax'
}

with <y_true: Tensor>
export func cross_entropy(y_pred: Tensor): Tensor {
    return -y_true * log(y_pred)
}