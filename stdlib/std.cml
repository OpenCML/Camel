/**
 * Copyright (c) 2024 Beijing Jiaotong University
 * Camel is licensed under the MIT license.
 * You can use this software according to the terms and conditions of the the MIT license.
 * You may obtain a copy of the MIT license at: [https://opensource.org/license/mit]
 *
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 *
 * See the the MIT license for more details.
 *
 * Author: Zhenjie Wei
 * Created: Sep. 01, 2023
 * Supported by: National Key Research and Development Program of China
 */ 

/**
 * This CML module will be imported by interpreter automatically,
 * and can be accessed Anywhere in Any CML script.
 */ 

// psl, json, phtc, xml, toml

with <loader: Functor = psl>
inner func load(path: String): Any {
    // inner func
};

with <path: String, ftype: String = 'psl'>
inner func save(entity: Any) {
    // inner func
};

with <stream: String = 'stdout'>
inner static func print(data: Any) {
    // inner func
};

with <diagram: Functor = eye>
inner static func analyze(data: Any) {
    // inner func
};

inner static func help() {
    // inner func
};

inner static func version() {
    // inner func
};

inner static func about() {
    // inner func
};

inner static func exit() {
    // inner func
};

inner static func map() {
    // inner func
};

inner static func reduce() {
    // inner func
};

inner static func ifexpr(
    condition: Bool,
    trueValue: Any,
    falseValue: Any
) {
    // return trueValue if condition is true, otherwise return falseValue
};

with <after: Functor>
inner func exec(block: Functor): Void {
    // execute the following block synchronously
    // if after is specified, run it after execution of block
};

with <after: Functor>
inner static func skip(entity: Any): Void {
    // skip an entity in an entity chain
};

let else = skip;

static func if(condition: Bool) {
    return ifexpr(condition, exec, skip<skip>)
};

static func while(condition: Functor) {
    return test<condition: condition>
};

static func for(
    capture: Any,
    condition: Functor,
    update: Functor
) {
    return test<capture, condition, update>
};

with <f: Functor>
inner func map(entity: Any) {
    // apply f to each element in entity
};

with <f: Functor>
inner func foreach(entity: Any) {
    // for each element in entity, apply f to it
};

inner func plus(lhs: Any, rhs: Any): Any {
    // return lhs + rhs
};

inner func minus(lhs: Any, rhs: Any): Any {
    // return lhs - rhs
};

inner func leq(lhs: Any, rhs: Any): Bool {
    // return lhs <= rhs
};
